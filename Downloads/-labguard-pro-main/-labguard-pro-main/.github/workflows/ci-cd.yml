name: LabGuard Pro CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: labguard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd apps/web && npm ci
          cd ../api && npm ci

      - name: Run linting
        run: |
          npm run lint
          cd apps/web && npm run lint
          cd ../api && npm run lint

      - name: Run type checking
        run: |
          npm run type-check
          cd apps/web && npm run type-check
          cd ../api && npm run type-check

      - name: Run tests
        run: |
          npm run test
          cd apps/web && npm run test
          cd ../api && npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/labguard_test
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_SECRET: test-secret
          JWT_SECRET: test-jwt-secret

      - name: Build applications
        run: |
          cd apps/web && npm run build
          cd ../api && npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/labguard_test
          NEXTAUTH_SECRET: test-secret

      - name: Build Docker images
        run: |
          docker build -f apps/web/Dockerfile.prod -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }} .
          docker build -f apps/api/Dockerfile.prod -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }} .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            apps/web/dist
            apps/api/dist

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply -f k8s/staging/
          # or docker-compose -f docker-compose.staging.yml up -d

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: kubectl apply -f k8s/production/
          # or docker-compose -f docker-compose.prod.yml up -d

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Add performance testing logic here
          # Example: k6 run performance-tests/load-test.js

  # Notify team
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, performance]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Production deployment successful!"
          else
            echo "❌ Production deployment failed!"
          fi 