// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  hashedPassword    String   // Changed from password to hashedPassword
  firstName         String
  lastName          String
  name              String?  // Computed field for display
  role              UserRole @default(TECHNICIAN)
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  failedLoginAttempts Int    @default(0)
  lockedUntil       DateTime?
  passwordChangedAt DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  laboratoryId      String
  laboratory        Laboratory @relation(fields: [laboratoryId], references: [id])
  calibrations      CalibrationRecord[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  sessions          Session[]

  // Indexes for performance
  @@index([email])
  @@index([laboratoryId])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model Laboratory {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  website     String?
  licenseNumber String?
  isActive    Boolean  @default(true)
  settings    Json?    // Laboratory settings as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  equipment   Equipment[]
  calibrations CalibrationRecord[]
  subscriptions Subscription[]
  notifications Notification[]
  auditLogs   AuditLog[]

  // Indexes for performance
  @@index([email])
  @@index([isActive])
  @@index([createdAt])
  @@map("laboratories")
}

// Authentication Tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([sessionToken])
  @@index([userId])
  @@map("sessions")
}

// Equipment Management
model Equipment {
  id              String           @id @default(cuid())
  name            String
  model           String?
  serialNumber    String?          @unique
  manufacturer    String?
  location        String?
  status          EquipmentStatus  @default(ACTIVE)
  lastCalibrated  DateTime?
  nextCalibration DateTime?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  laboratoryId    String
  laboratory      Laboratory       @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
  calibrations    CalibrationRecord[]
  maintenance     MaintenanceRecord[]

  // Indexes for performance
  @@index([laboratoryId])
  @@index([status])
  @@index([nextCalibration])
  @@index([serialNumber])
  @@index([createdAt])
  @@map("equipment")
}

// Calibration Records
model CalibrationRecord {
  id              String              @id @default(cuid())
  equipmentId     String
  equipment       Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  laboratoryId    String
  laboratory      Laboratory          @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
  
  calibrationDate DateTime
  dueDate         DateTime
  status          CalibrationStatus  @default(PENDING)
  result          CalibrationResult  @default(PASS)
  notes           String?
  aiValidation    Json?              // AI compliance check results
  complianceScore Float?             // 0-100 compliance score
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Indexes for performance
  @@index([equipmentId])
  @@index([userId])
  @@index([laboratoryId])
  @@index([status])
  @@index([dueDate])
  @@index([calibrationDate])
  @@index([complianceScore])
  @@index([createdAt])
  @@map("calibration_records")
}

// Maintenance Records
model MaintenanceRecord {
  id              String              @id @default(cuid())
  equipmentId     String
  equipment       Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  maintenanceDate DateTime
  type            MaintenanceType
  description     String
  performedBy     String?
  cost            Float?
  status          MaintenanceStatus  @default(COMPLETED)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Indexes for performance
  @@index([equipmentId])
  @@index([maintenanceDate])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("maintenance_records")
}

// Notifications
model Notification {
  id          String           @id @default(cuid())
  userId      String?
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  laboratoryId String
  laboratory  Laboratory       @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  metadata    Json?            // Additional data for the notification
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Indexes for performance
  @@index([userId])
  @@index([laboratoryId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Audit Logs
model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  laboratoryId String
  laboratory  Laboratory  @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
  action      String      // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity      String      // Equipment, Calibration, User, etc.
  entityId    String?     // ID of the affected entity
  details     Json?       // Additional details about the action
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  // Indexes for performance
  @@index([userId])
  @@index([laboratoryId])
  @@index([action])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Subscription Management
model Subscription {
  id                String              @id @default(cuid())
  laboratoryId      String              @unique
  laboratory        Laboratory          @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
  planId            String
  plan              SubscriptionPlan    @relation(fields: [planId], references: [id])
  stripeId          String?            @unique
  stripeCustomerId  String?
  status            SubscriptionStatus  @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  trialStart         DateTime?
  trialEnd           DateTime?
  cancelAtPeriodEnd  Boolean           @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Indexes for performance
  @@index([planId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([createdAt])
  @@map("subscriptions")
}

model SubscriptionPlan {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  price             Float
  currency          String   @default("USD")
  interval          String   @default("month") // month, year
  stripeId          String?  @unique
  equipmentLimit    Int      @default(10)
  aiChecksLimit     Int      @default(100)
  teamMembersLimit  Int      @default(5)
  storageLimit      Int      @default(10) // GB
  features          Json     // Array of feature names
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  subscriptions     Subscription[]

  // Indexes for performance
  @@index([isActive])
  @@index([price])
  @@index([createdAt])
  @@map("subscription_plans")
}

// AI Compliance Templates
model ComplianceTemplate {
  id                String   @id @default(cuid())
  title             String
  category          TemplateCategory
  useCase           String
  promptTemplate    String   @db.Text
  variables         Json     // Array of template variables
  safetyChecks      String[] // Array of safety check names
  validationCriteria Json    // Validation criteria object
  regulatoryStandards String[] // Array of regulatory standards
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  usageRecords      TemplateUsage[]

  // Indexes for performance
  @@index([category])
  @@index([isActive])
  @@index([createdAt])
  @@map("compliance_templates")
}

model TemplateUsage {
  id                String   @id @default(cuid())
  templateId        String
  template          ComplianceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId            String
  laboratoryId      String
  query             String
  result            Json?
  executionTime     Int?     // milliseconds
  cost              Float?
  createdAt         DateTime @default(now())

  // Indexes for performance
  @@index([templateId])
  @@index([userId])
  @@index([laboratoryId])
  @@index([createdAt])
  @@map("template_usage")
}

// Enhanced Biomni Integration
model BiomniQuery {
  id                String   @id @default(cuid())
  query             String
  context           String?
  userId            String
  laboratoryId      String
  result            Json?
  toolsUsed         String[]
  databasesQueried  String[]
  confidence        Float?
  executionTime     Int?     // milliseconds
  cost              Float?
  status            QueryStatus @default(EXECUTING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  multiModalInputs  MultiModalInput[]
  agenticTasks      AgenticTask[]

  // Indexes for performance
  @@index([userId])
  @@index([laboratoryId])
  @@index([status])
  @@index([createdAt])
  @@map("biomni_queries")
}

// Enhanced Multi-Modal Input Model
model MultiModalInput {
  id                String   @id @default(cuid())
  type              MultiModalType
  content           String   // Base64 encoded or file path
  metadata          Json?    // Format, size, timestamp, source, coordinates
  userId            String
  laboratoryId      String
  queryId           String?
  taskId            String?
  processed         Boolean  @default(false)
  result            Json?
  confidence        Float?
  processingTime    Int?     // milliseconds
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  query             BiomniQuery? @relation(fields: [queryId], references: [id])
  task              AgenticTask? @relation(fields: [taskId], references: [id])

  // Indexes for performance
  @@index([userId])
  @@index([laboratoryId])
  @@index([type])
  @@index([processed])
  @@index([createdAt])
  @@map("multi_modal_inputs")
}

// Enhanced Agentic Task Model
model AgenticTask {
  id                String   @id @default(cuid())
  type              AgenticTaskType
  priority          TaskPriority @default(MEDIUM)
  status            TaskStatus @default(PENDING)
  description       String
  expectedOutput    String
  tools             String[]
  deadline          DateTime?
  dependencies      String[]  // Array of task IDs
  context           Json?
  userId            String
  laboratoryId      String
  queryId           String?
  progress          Float     @default(0)
  startTime         DateTime?
  completionTime    DateTime?
  result            Json?
  confidence        Float?
  executionTime     Int?      // milliseconds
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  query             BiomniQuery? @relation(fields: [queryId], references: [id])
  multiModalInputs  MultiModalInput[]
  conversationHistory ConversationHistory[]

  // Indexes for performance
  @@index([userId])
  @@index([laboratoryId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("agentic_tasks")
}

// Enhanced Research Capabilities Model
model ResearchCapabilities {
  id                String   @id @default(cuid())
  laboratoryId      String
  bioinformaticsAnalysis Boolean @default(false)
  protocolDesign    Boolean @default(false)
  literatureReview  Boolean @default(false)
  hypothesisGeneration Boolean @default(false)
  dataAnalysis      Boolean @default(false)
  multiModalAnalysis Boolean @default(false)
  predictiveModeling Boolean @default(false)
  experimentalDesign Boolean @default(false)
  qualityControl    Boolean @default(false)
  complianceMonitoring Boolean @default(false)
  availableTools    Int      @default(0)
  availableDatabases Int     @default(0)
  availableSoftware Int      @default(0)
  customLabTools    String[]
  speedupFactor     Float    @default(1.0)
  accuracyLevel     String   @default("standard")
  contextWindow     Int      @default(4096)
  realTimeProcessing Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Indexes for performance
  @@index([laboratoryId])
  @@index([createdAt])
  @@map("research_capabilities")
}

// Enhanced Lab Context Model
model LabContext {
  id                String   @id @default(cuid())
  laboratoryId      String
  userId            String
  context           Json     // Current lab context, equipment status, etc.
  activeExperiments String[]
  equipmentStatus   Json?
  complianceStatus  Json?
  qualityMetrics    Json?
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())

  // Indexes for performance
  @@index([laboratoryId])
  @@index([userId])
  @@index([lastUpdated])
  @@map("lab_contexts")
}

// Enhanced Conversation History Model
model ConversationHistory {
  id                String   @id @default(cuid())
  taskId            String
  messageType       MessageType
  content           String
  metadata          Json?    // Avatar state, suggestions, research result, etc.
  timestamp         DateTime @default(now())
  userId            String
  laboratoryId      String

  // Relations
  task              AgenticTask @relation(fields: [taskId], references: [id])

  // Indexes for performance
  @@index([taskId])
  @@index([userId])
  @@index([laboratoryId])
  @@index([timestamp])
  @@map("conversation_history")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  TECHNICIAN
  USER
}

enum EquipmentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  RETIRED
}

enum CalibrationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum CalibrationResult {
  PASS
  FAIL
  CONDITIONAL
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  CALIBRATION_DUE
  CALIBRATION_OVERDUE
  MAINTENANCE_DUE
  SYSTEM_ALERT
  USER_INVITE
  SUBSCRIPTION_UPDATE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  UNPAID
}

enum TemplateCategory {
  EQUIPMENT_CALIBRATION
  SAMPLE_HANDLING
  RESULT_VALIDATION
  AUDIT_PREPARATION
}

enum QueryStatus {
  EXECUTING
  COMPLETED
  FAILED
  CANCELLED
}

// Enhanced Enums
enum MultiModalType {
  TEXT
  VOICE
  IMAGE
  FILE
  DATA
  SENSOR
}

enum AgenticTaskType {
  RESEARCH
  PROTOCOL
  ANALYSIS
  MONITORING
  OPTIMIZATION
  COMPLIANCE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum MessageType {
  USER
  ASSISTANT
  SYSTEM
  TASK
  ALERT
}
