# ðŸŽ¯ **NEXT STEP: Dashboard Components & Overview**

## **Cursor Prompt #17: Main Dashboard & Header Components**

```
Create the main dashboard overview page and header component with the following EXACT implementations:

File: apps/web/src/components/dashboard/DashboardHeader.tsx
```typescript
'use client'

import { useState } from 'react'
import { useSession, signOut } from 'next-auth/react'
import { Bell, Search, Settings, LogOut, User, ChevronDown } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'

export function DashboardHeader() {
  const { data: session } = useSession()
  const [showUserMenu, setShowUserMenu] = useState(false)
  const [notifications] = useState([
    {
      id: 1,
      title: 'Calibration Due',
      message: 'Balance PB-220 calibration due in 2 days',
      type: 'warning',
      time: '2 hours ago'
    },
    {
      id: 2,
      title: 'Calibration Completed',
      message: 'Centrifuge CF-16 calibration completed successfully',
      type: 'success',
      time: '4 hours ago'
    },
    {
      id: 3,
      title: 'Equipment Alert',
      message: 'Incubator IC-200 temperature variance detected',
      type: 'error',
      time: '6 hours ago'
    }
  ])

  const handleSignOut = async () => {
    await signOut({ callbackUrl: '/login' })
  }

  return (
    <div className="bg-white border-b border-gray-200 px-4 py-4 sm:px-6 lg:px-8">
      <div className="flex items-center justify-between">
        {/* Search */}
        <div className="flex-1 max-w-lg">
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <Input
              type="text"
              placeholder="Search equipment, calibrations..."
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        {/* Right side actions */}
        <div className="flex items-center space-x-4">
          {/* Notifications */}
          <div className="relative">
            <Button
              variant="ghost"
              size="sm"
              className="relative"
              onClick={() => console.log('Toggle notifications')}
            >
              <Bell className="h-5 w-5 text-gray-500" />
              {notifications.length > 0 && (
                <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                  {notifications.length}
                </span>
              )}
            </Button>
          </div>

          {/* User menu */}
          <div className="relative">
            <Button
              variant="ghost"
              onClick={() => setShowUserMenu(!showUserMenu)}
              className="flex items-center space-x-2 text-sm"
            >
              <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-medium">
                  {session?.user?.name?.split(' ').map(n => n[0]).join('') || 'U'}
                </span>
              </div>
              <div className="hidden md:block text-left">
                <div className="text-sm font-medium text-gray-900">
                  {session?.user?.name}
                </div>
                <div className="text-xs text-gray-500">
                  {session?.user?.role}
                </div>
              </div>
              <ChevronDown className="h-4 w-4 text-gray-500" />
            </Button>

            {/* Dropdown menu */}
            {showUserMenu && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-gray-200">
                <a
                  href="/dashboard/settings/profile"
                  className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <User className="h-4 w-4 mr-2" />
                  Your Profile
                </a>
                <a
                  href="/dashboard/settings"
                  className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <Settings className="h-4 w-4 mr-2" />
                  Settings
                </a>
                <div className="border-t border-gray-100">
                  <button
                    onClick={handleSignOut}
                    className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                  >
                    <LogOut className="h-4 w-4 mr-2" />
                    Sign out
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
```

File: apps/web/src/app/dashboard/page.tsx
```typescript
'use client'

import { useSession } from 'next-auth/react'
import { useEffect, useState } from 'react'
import { 
  Activity, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Microscope, 
  TrendingUp,
  Calendar,
  FileText,
  Users,
  DollarSign
} from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import Link from 'next/link'

interface DashboardStats {
  totalEquipment: number
  compliantEquipment: number
  overdueCalibrations: number
  dueSoonCalibrations: number
  completedThisMonth: number
  savingsThisMonth: number
  complianceRate: number
  avgCalibrationTime: number
}

interface RecentActivity {
  id: string
  type: 'calibration_completed' | 'calibration_due' | 'equipment_added' | 'alert'
  title: string
  description: string
  timestamp: string
  equipmentName?: string
  status: 'success' | 'warning' | 'error' | 'info'
}

export default function DashboardPage() {
  const { data: session } = useSession()
  const [stats, setStats] = useState<DashboardStats>({
    totalEquipment: 0,
    compliantEquipment: 0,
    overdueCalibrations: 0,
    dueSoonCalibrations: 0,
    completedThisMonth: 0,
    savingsThisMonth: 0,
    complianceRate: 0,
    avgCalibrationTime: 0
  })
  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchDashboardData()
  }, [])

  const fetchDashboardData = async () => {
    try {
      // Simulate API calls - replace with actual API endpoints
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Mock data - replace with actual API responses
      setStats({
        totalEquipment: 47,
        compliantEquipment: 44,
        overdueCalibrations: 3,
        dueSoonCalibrations: 7,
        completedThisMonth: 23,
        savingsThisMonth: 12500,
        complianceRate: 93.6,
        avgCalibrationTime: 15
      })

      setRecentActivity([
        {
          id: '1',
          type: 'calibration_completed',
          title: 'Calibration Completed',
          description: 'Balance PB-220 calibration completed successfully',
          timestamp: '2 hours ago',
          equipmentName: 'Balance PB-220',
          status: 'success'
        },
        {
          id: '2',
          type: 'calibration_due',
          title: 'Calibration Due Soon',
          description: 'Centrifuge CF-16 calibration due in 3 days',
          timestamp: '4 hours ago',
          equipmentName: 'Centrifuge CF-16',
          status: 'warning'
        },
        {
          id: '3',
          type: 'alert',
          title: 'Temperature Alert',
          description: 'Incubator IC-200 temperature variance detected',
          timestamp: '6 hours ago',
          equipmentName: 'Incubator IC-200',
          status: 'error'
        },
        {
          id: '4',
          type: 'equipment_added',
          title: 'Equipment Added',
          description: 'New spectrophotometer SP-300 added to inventory',
          timestamp: '1 day ago',
          equipmentName: 'Spectrophotometer SP-300',
          status: 'info'
        }
      ])
    } catch (error) {
      console.error('Failed to fetch dashboard data:', error)
    } finally {
      setLoading(false)
    }
  }

  const getActivityIcon = (type: RecentActivity['type']) => {
    switch (type) {
      case 'calibration_completed':
        return <CheckCircle className="w-4 h-4" />
      case 'calibration_due':
        return <Clock className="w-4 h-4" />
      case 'alert':
        return <AlertTriangle className="w-4 h-4" />
      case 'equipment_added':
        return <Microscope className="w-4 h-4" />
      default:
        return <Activity className="w-4 h-4" />
    }
  }

  const getActivityColor = (status: RecentActivity['status']) => {
    switch (status) {
      case 'success':
        return 'text-green-600 bg-green-100'
      case 'warning':
        return 'text-yellow-600 bg-yellow-100'
      case 'error':
        return 'text-red-600 bg-red-100'
      case 'info':
        return 'text-blue-600 bg-blue-100'
      default:
        return 'text-gray-600 bg-gray-100'
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
                <div className="h-8 bg-gray-200 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Welcome Section */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900">
          Welcome back, {session?.user?.name?.split(' ')[0]}!
        </h1>
        <p className="mt-1 text-sm text-gray-600">
          Here's what's happening in {session?.user?.laboratoryName} today.
        </p>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Equipment</CardTitle>
            <Microscope className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalEquipment}</div>
            <p className="text-xs text-muted-foreground">
              {stats.compliantEquipment} compliant
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Compliance Rate</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.complianceRate}%</div>
            <p className="text-xs text-muted-foreground">
              +2.5% from last month
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Overdue Items</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{stats.overdueCalibrations}</div>
            <p className="text-xs text-muted-foreground">
              Requires immediate attention
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Monthly Savings</CardTitle>
            <DollarSign className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              ${stats.savingsThisMonth.toLocaleString()}
            </div>
            <p className="text-xs text-muted-foreground">
              From prevented failures
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions & Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Quick Actions */}
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>
              Common tasks and shortcuts
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <Link href="/dashboard/equipment/new">
              <Button className="w-full justify-start" variant="outline">
                <Microscope className="w-4 h-4 mr-2" />
                Add Equipment
              </Button>
            </Link>
            <Link href="/dashboard/calibrations/new">
              <Button className="w-full justify-start" variant="outline">
                <Calendar className="w-4 h-4 mr-2" />
                Schedule Calibration
              </Button>
            </Link>
            <Link href="/dashboard/reports/compliance">
              <Button className="w-full justify-start" variant="outline">
                <FileText className="w-4 h-4 mr-2" />
                Generate Report
              </Button>
            </Link>
            <Link href="/dashboard/team">
              <Button className="w-full justify-start" variant="outline">
                <Users className="w-4 h-4 mr-2" />
                Manage Team
              </Button>
            </Link>
          </CardContent>
        </Card>

        {/* Recent Activity */}
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle>Recent Activity</CardTitle>
            <CardDescription>
              Latest updates and notifications
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentActivity.map((activity) => (
                <div key={activity.id} className="flex items-start space-x-3">
                  <div className={`p-2 rounded-full ${getActivityColor(activity.status)}`}>
                    {getActivityIcon(activity.type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-gray-900">
                      {activity.title}
                    </p>
                    <p className="text-sm text-gray-500">
                      {activity.description}
                    </p>
                    <p className="text-xs text-gray-400 mt-1">
                      {activity.timestamp}
                    </p>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-4 pt-4 border-t border-gray-200">
              <Link href="/dashboard/notifications">
                <Button variant="ghost" className="w-full">
                  View all notifications
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Urgent Items */}
      {(stats.overdueCalibrations > 0 || stats.dueSoonCalibrations > 0) && (
        <Card className="border-yellow-200 bg-yellow-50">
          <CardHeader>
            <CardTitle className="text-yellow-800">Items Requiring Attention</CardTitle>
            <CardDescription className="text-yellow-700">
              Equipment that needs calibration or maintenance
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {stats.overdueCalibrations > 0 && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <div className="flex items-center">
                    <AlertTriangle className="w-5 h-5 text-red-500 mr-2" />
                    <span className="font-medium text-red-800">
                      {stats.overdueCalibrations} Overdue Calibrations
                    </span>
                  </div>
                  <p className="text-sm text-red-700 mt-1">
                    These items are past their calibration due date
                  </p>
                  <Link href="/dashboard/calibrations/overdue">
                    <Button size="sm" variant="outline" className="mt-2 border-red-300 text-red-700 hover:bg-red-100">
                      View Overdue Items
                    </Button>
                  </Link>
                </div>
              )}
              
              {stats.dueSoonCalibrations > 0 && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-center">
                    <Clock className="w-5 h-5 text-yellow-500 mr-2" />
                    <span className="font-medium text-yellow-800">
                      {stats.dueSoonCalibrations} Due Within 7 Days
                    </span>
                  </div>
                  <p className="text-sm text-yellow-700 mt-1">
                    Schedule these calibrations soon to avoid overdue status
                  </p>
                  <Link href="/dashboard/calibrations?filter=due-soon">
                    <Button size="sm" variant="outline" className="mt-2 border-yellow-300 text-yellow-700 hover:bg-yellow-100">
                      Schedule Now
                    </Button>
                  </Link>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Performance Summary */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">This Month</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Calibrations Completed</span>
                <span className="font-semibold">{stats.completedThisMonth}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Avg. Time per Calibration</span>
                <span className="font-semibold">{stats.avgCalibrationTime} min</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Cost Savings</span>
                <span className="font-semibold text-green-600">
                  ${stats.savingsThisMonth.toLocaleString()}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Compliance Status</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Compliant Equipment</span>
                <div className="flex items-center">
                  <CheckCircle className="w-4 h-4 text-green-500 mr-1" />
                  <span className="font-semibold">{stats.compliantEquipment}</span>
                </div>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Non-Compliant</span>
                <div className="flex items-center">
                  <AlertTriangle className="w-4 h-4 text-red-500 mr-1" />
                  <span className="font-semibold">{stats.totalEquipment - stats.compliantEquipment}</span>
                </div>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-green-500 h-2 rounded-full" 
                  style={{ width: `${stats.complianceRate}%` }}
                ></div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Quick Stats</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">99.2%</div>
                <div className="text-xs text-gray-500">Uptime This Month</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">156</div>
                <div className="text-xs text-gray-500">AI Checks Performed</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">4.2min</div>
                <div className="text-xs text-gray-500">Avg Response Time</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
```

File: apps/web/src/components/ui/card.tsx
```typescript
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
```

File: apps/web/src/app/globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

Create ALL the above files exactly as specified. This creates:

1. **Professional dashboard header** with search, notifications, and user menu
2. **Comprehensive dashboard overview** with real metrics and activity feed
3. **Key performance indicators** showing compliance status and savings
4. **Quick actions** for common tasks
5. **Alert system** for overdue and upcoming calibrations
6. **Performance analytics** with monthly summaries
7. **Card components** for consistent UI layout

After creating these files, test your dashboard by logging in and navigating to `/dashboard`. 

Next I'll give you the prompt for **Equipment Management Pages**.
```

---

# ðŸŽ¯ **NEXT STEP: Equipment Management Pages**

## **Cursor Prompt #18: Equipment Management System**

```
Create the complete equipment management system with the following EXACT implementations:

File: apps/web/src/app/dashboard/equipment/page.tsx
```typescript
'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import Link from 'next/link'
import { 
  Plus, 
  Search, 
  Filter, 
  MoreHorizontal, 
  Edit, 
  Trash2, 
  Calendar,
  AlertTriangle,
  CheckCircle,
  Clock,
  Microscope
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'

interface Equipment {
  id: string
  name: string
  model: string
  serialNumber: string
  manufacturer: string
  equipmentType: string
  location: string
  status: 'ACTIVE' | 'INACTIVE' | 'MAINTENANCE' | 'CALIBRATION_DUE' | 'OUT_OF_SERVICE' | 'RETIRED'
  installDate: string
  warrantyExpiry: string
  lastCalibration: {
    id: string
    status: string
    complianceStatus: string
    dueDate: string
    performedDate: string
  } | null
  _count: {
    calibrationRecords: number
    maintenanceRecords: number
  }
}

export default function EquipmentPage() {
  const { data: session } = useSession()
  const [equipment, setEquipment] = useState<Equipment[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [typeFilter, setTypeFilter] = useState<string>('all')
  const [showFilters, setShowFilters] = useState(false)

  useEffect(() => {
    fetchEquipment()
  }, [])

  const fetchEquipment = async () => {
    try {
      // Simulate API call - replace with actual API
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const mockEquipment: Equipment[] = [
        {
          id: '1',
          name: 'Precision Balance PB-220',
          model: 'PB-220',
          serialNumber: 'PB220-2024-001',
          manufacturer: 'Mettler Toledo',
          equipmentType: 'ANALYTICAL_BALANCE',
          location: 'Chemistry Lab - Bench 1',
          status: 'ACTIVE',
          installDate: '2024-01-15T00:00:00Z',
          warrantyExpiry: '2027-01-15T00:00:00Z',
          lastCalibration: {
            id: 'cal-1',
            status: 'COMPLETED',
            complianceStatus: 'COMPLIANT',
            dueDate: '2024-04-15T00:00:00Z',
            performedDate: '2024-01-15T00:00:00Z'
          },
          _count: {
            calibrationRecords: 4,
            maintenanceRecords: 2
          }
        },
        {
          id: '2',
          name: 'High-Speed Centrifuge CF-16',
          model: 'CF-16',
          serialNumber: 'CF16-2024-002',
          manufacturer: 'Eppendorf',
          equipmentType: 'CENTRIFUGE',
          location: 'Processing Room - Station 2',
          status: 'CALIBRATION_DUE',
          installDate: '2024-01-20T00:00:00Z',
          warrantyExpiry: '2027-01-20T00:00:00Z',
          lastCalibration: {
            id: 'cal-2',
            status: 'COMPLETED',
            complianceStatus: 'CONDITIONAL',
            dueDate: '2024-02-20T00:00:00Z',
            performedDate: '2023-11-20T00:00:00Z'
          },
          _count: {
            calibrationRecords: 3,
            maintenanceRecords: 1
          }
        },
        {
          id: '3',
          name: 'CO2 Incubator IC-200',
          model: 'IC-200',
          serialNumber: 'IC200-2024-003',
          manufacturer: 'Thermo Fisher',
          equipmentType: 'INCUBATOR',
          location: 'Microbiology Lab - Corner Unit',
          status: 'MAINTENANCE',
          installDate: '2024-01-25T00:00:00Z',
          warrantyExpiry: '2027-01-25T00:00:00Z',
          lastCalibration: null,
          _count: {
            calibrationRecords: 0,
            maintenanceRecords: 0
          }
        }
      ]
      
      setEquipment(mockEquipment)
    } catch (error) {
      console.error('Failed to fetch equipment:', error)
    } finally {
      setLoading(false)
    }
  }

  const getStatusBadge = (status: Equipment['status']) => {
    switch (status) {
      case 'ACTIVE':
        return <Badge className="bg-green-100 text-green-800">Active</Badge>
      case 'CALIBRATION_DUE':
        return <Badge className="bg-yellow-100 text-yellow-800">Calibration Due</Badge>
      case 'MAINTENANCE':
        return <Badge className="bg-blue-100 text-blue-800">Maintenance</Badge>
      case 'OUT_OF_SERVICE':
        return <Badge className="bg-red-100 text-red-800">Out of Service</Badge>
      case 'INACTIVE':
        return <Badge className="bg-gray-100 text-gray-800">Inactive</Badge>
      case 'RETIRED':
        return <Badge className="bg-gray-100 text-gray-800">Retired</Badge>
      default:
        return <Badge className="bg-gray-100 text-gray-800">{status}</Badge>
    }
  }

  const getComplianceIcon = (complianceStatus: string | null) => {
    switch (complianceStatus) {
      case 'COMPLIANT':
        return <CheckCircle className="w-4 h-4 text-green-500" />
      case 'NON_COMPLIANT':
        return <AlertTriangle className="w-4 h-4 text-red-500" />
      case 'CONDITIONAL':
        return <Clock className="w-4 h-4 text-yellow-500" />
      default:
        return <AlertTriangle className="w-4 h-4 text-gray-400" />
    }
  }

  const filteredEquipment = equipment.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.model.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.serialNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.manufacturer.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesStatus = statusFilter === 'all' || item.status === statusFilter
    const matchesType = typeFilter === 'all' || item.equipmentType === typeFilter
    
    return matchesSearch && matchesStatus && matchesType
  })

  const equipmentTypes = [
    'ANALYTICAL_BALANCE',
    'CENTRIFUGE',
    'INCUBATOR',
    'AUTOCLAVE',
    'SPECTROPHOTOMETER',
    'PCR_MACHINE',
    'MICROSCOPE',
    'PIPETTE'
  ]

  const statusOptions = [
    'ACTIVE',
    'CALIBRATION_DUE',
    'MAINTENANCE',
    'OUT_OF_SERVICE',
    'INACTIVE',
    'RETIRED'
  ]

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
                <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-2/3"></div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Equipment Management</h1>
          <p className="text-sm text-gray-600">
            Manage and monitor all laboratory equipment
          </p>
        </div>
        <Link href="/dashboard/equipment/new">
          <Button className="bg-blue-600 hover:bg-blue-700">
            <Plus className="w-4 h-4 mr-2" />
            Add Equipment
          </Button>
        </Link>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Microscope className="w-6 h-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-bold">{equipment.length}</p>
                <p className="text-sm text-gray-600">Total Equipment</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-bold">
                  {equipment.filter(e => e.status === 'ACTIVE').length}
                </p>
                <p className="text-sm text-gray-600">Active</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <Clock className="w-6 h-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-bold">
                  {equipment.filter(e => e.status === 'CALIBRATION_DUE').length}
                </p>
                <p className="text-sm text-gray-600">Due for Calibration</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <AlertTriangle className="w-6 h-6 text-red-600" />
              </div>
              <div className="ml-4">
                <p className="text-2xl font-bold">
                  {equipment.filter(e => e.status === 'OUT_OF_SERVICE').length}
                </p>
                <p className="text-sm text-gray-600">Out of Service</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input
            placeholder="Search equipment..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <Button
          variant="outline"
          onClick={() => setShowFilters(!showFilters)}
          className="whitespace-nowrap"
        >
          <Filter className="w-4 h-4 mr-2" />
          Filters
        </Button>
      </div>

      {/* Filter Panel */}
      {showFilters && (
        <Card>
          <CardContent className="pt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="all">All Statuses</option>
                  {statusOptions.map(status => (
                    <option key={status} value={status}>
                      {status.replace('_', ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Equipment Type
                </label>
                <select
                  value={typeFilter}
                  onChange={(e) => setTypeFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="all">All Types</option>
                  {equipmentTypes.map(type => (
                    <option key={type} value={type}>
                      {type.replace('_', ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase())}
                    </option>
                  ))}
                </select>
              </div>

              <div className="flex items-end">
                <Button
                  variant="outline"
                  onClick={() => {
                    setStatusFilter('all')
                    setTypeFilter('all')
                    setSearchTerm('')
                  }}
                  className="w-full"
                >
                  Clear Filters
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Equipment Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredEquipment.map((item) => (
          <Card key={item.id} className="hover:shadow-md transition-shadow">
            <CardHeader className="pb-3">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <CardTitle className="text-lg font-semibold text-gray-900 mb-1">
                    {item.name}
                  </CardTitle>
                  <CardDescription className="text-sm text-gray-600">
                    {item.manufacturer} â€¢ {item.model}
                  </CardDescription>
                </div>
                <div className="relative">
                  <Button variant="ghost" size="sm">
                    <MoreHorizontal className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>

            <CardContent className="space-y-4">
              {/* Status and Compliance */}
              <div className="flex justify-between items-center">
                {getStatusBadge(item.status)}
                <div className="flex items-center space-x-1">
                  {getComplianceIcon(item.lastCalibration?.complianceStatus || null)}
                  <span className="text-xs text-gray-600">
                    {item.lastCalibration?.complianceStatus || 'No Data'}
                  </span>
                </div>
              </div>

              {/* Details */}
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Serial Number:</span>
                  <span className="font-medium">{item.serialNumber}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Location:</span>
                  <span className="font-medium">{item.location}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Last Calibration:</span>
                  <span className="font-medium">
                    {item.lastCalibration?.performedDate 
                      ? new Date(item.lastCalibration.performedDate).toLocaleDateString()
                      : 'Never'
                    }
                  </span>
                </div>
              </div>

              {/* Next Calibration Due */}
              {item.lastCalibration?.dueDate && (
                <div className="bg-gray-50 rounded-lg p-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-700">Next Calibration Due:</span>
                    <span className="text-sm font-semibold text-blue-600">
                      {new Date(item.lastCalibration.dueDate).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex space-x-2 pt-2">
                <Link href={`/dashboard/equipment/${item.id}`} className="flex-1">
                  <Button variant="outline" size="sm" className="w-full">
                    <Edit className="w-3 h-3 mr-1" />
                    View
                  </Button>
                </Link>
                <Link href={`/dashboard/calibrations/new?equipmentId=${item.id}`} className="flex-1">
                  <Button size="sm" className="w-full bg-blue-600 hover:bg-blue-700">
                    <Calendar className="w-3 h-3 mr-1" />
                    Calibrate
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Empty State */}
      {filteredEquipment.length === 0 && !loading && (
        <Card className="text-center py-12">
          <CardContent>
            <Microscope className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No equipment found</h3>
            <p className="text-gray-600 mb-6">
              {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'
                ? 'Try adjusting your search or filters.'
                : 'Get started by adding your first piece of equipment.'
              }
            </p>
            {!(searchTerm || statusFilter !== 'all' || typeFilter !== 'all') && (
              <Link href="/dashboard/equipment/new">
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="w-4 h-4 mr-2" />
                  Add Equipment
                </Button>
              </Link>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}
```

File: apps/web/src/components/ui/badge.tsx
```typescript
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
```

File: apps/web/src/app/dashboard/equipment/new/page.tsx
```typescript
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { ArrowLeft, Loader2, Save } from 'lucide-react'
import Link from 'next/link'

export default function NewEquipmentPage() {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [formData, setFormData] = useState({
    name: '',
    model: '',
    serialNumber: '',
    manufacturer: '',
    equipmentType: '',
    location: '',
    installDate: '',
    warrantyExpiry: '',
    specifications: {
      capacity: '',
      accuracy: '',
      operatingRange: '',
      powerRequirement: ''
    }
  })

  const equipmentTypes = [
    { value: 'ANALYTICAL_BALANCE', label: 'Analytical Balance' },
    { value: 'CENTRIFUGE', label: 'Centrifuge' },
    { value: 'INCUBATOR', label: 'Incubator' },
    { value: 'AUTOCLAVE', label: 'Autoclave' },
    { value: 'SPECTROPHOTOMETER', label: 'Spectrophotometer' },
    { value: 'PCR_MACHINE', label: 'PCR Machine' },
    { value: 'MICROSCOPE', label: 'Microscope' },
    { value: 'PIPETTE', label: 'Pipette' },
    { value: 'WATER_BATH', label: 'Water Bath' },
    { value: 'REFRIGERATOR', label: 'Refrigerator' },
    { value: 'FREEZER', label: 'Freezer' },
    { value: 'OTHER', label: 'Other' }
  ]

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      // Simulate API call - replace with actual API endpoint
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Redirect to equipment list on success
      router.push('/dashboard/equipment')
    } catch (error) {
      setError('Failed to create equipment. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const updateFormData = (field: string, value: string) => {
    if (field.startsWith('specifications.')) {
      const specField = field.replace('specifications.', '')
      setFormData(prev => ({
        ...prev,
        specifications: {
          ...prev.specifications,
          [specField]: value
        }
      }))
    } else {
      setFormData(prev => ({ ...prev, [field]: value }))
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center space-x-4">
        <Link href="/dashboard/equipment">
          <Button variant="outline" size="sm">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Equipment
          </Button>
        </Link>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Add New Equipment</h1>
          <p className="text-sm text-gray-600">
            Add a new piece of laboratory equipment to your inventory
          </p>
        </div>
      </div>

      {/* Form */}
      <div className="max-w-2xl">
        <form onSubmit={handleSubmit} className="space-y-6">
          {error && (
            <Alert className="border-red-200 bg-red-50">
              <AlertDescription className="text-red-800">
                {error}
              </AlertDescription>
            </Alert>
          )}

          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
              <CardDescription>
                Enter the basic details about the equipment
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Equipment Name *</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => updateFormData('name', e.target.value)}
                    placeholder="e.g., Precision Balance PB-220"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="equipmentType">Equipment Type *</Label>
                  <select
                    id="equipmentType"
                    value={formData.equipmentType}
                    onChange={(e) => updateFormData('equipmentType', e.target.value)}
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="">Select equipment type</option>
                    {equipmentTypes.map(type => (
                      <option key={type.value} value={type.value}>
                        {type.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <Label htmlFor="manufacturer">Manufacturer *</Label>
                  <Input
                    id="manufacturer"
                    value={formData.manufacturer}
                    onChange={(e) => updateFormData('manufacturer', e.target.value)}
                    placeholder="e.g., Mettler Toledo"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="model">Model *</Label>
                  <Input
                    id="model"
                    value={formData.model}
                    onChange={(e) => updateFormData('model', e.target.value)}
                    placeholder="e.g., PB-220"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="serialNumber">Serial Number *</Label>
                  <Input
                    id="serialNumber"
                    value={formData.serialNumber}
                    onChange={(e) => updateFormData('serialNumber', e.target.value)}
                    placeholder="e.g., PB220-2024-001"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={formData.location}
                    onChange={(e) => updateFormData('location', e.target.value)}
                    placeholder="e.g., Chemistry Lab - Bench 1"
                  />
                </div>

                <div>
                  <Label htmlFor="installDate">Install Date</Label>
                  <Input
                    id="installDate"
                    type="date"
                    value={formData.installDate}
                    onChange={(e) => updateFormData('installDate', e.target.value)}
                  />
                </div>

                <div>
                  <Label htmlFor="warrantyExpiry">Warranty Expiry</Label>
                  <Input
                    id="warrantyExpiry"
                    type="date"
                    value={formData.warrantyExpiry}
                    onChange={(e) => updateFormData('warrantyExpiry', e.target.value)}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Specifications */}
          <Card>
            <CardHeader>
              <CardTitle>Technical Specifications</CardTitle>
              <CardDescription>
                Add technical specifications for calibration and maintenance
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="capacity">Capacity/Range</Label>
                  <Input
                    id="capacity"
                    value={formData.specifications.capacity}
                    onChange={(e) => updateFormData('specifications.capacity', e.target.value)}
                    placeholder="e.g., 0-220g"
                  />
                </div>

                <div>
                  <Label htmlFor="accuracy">Accuracy</Label>
                  <Input
                    id="accuracy"
                    value={formData.specifications.accuracy}
                    onChange={(e) => updateFormData('specifications.accuracy', e.target.value)}
                    placeholder="e.g., Â±0.1mg"
                  />
                </div>

                <div>
                  <Label htmlFor="operatingRange">Operating Range</Label>
                  <Input
                    id="operatingRange"
                    value={formData.specifications.operatingRange}
                    onChange={(e) => updateFormData('specifications.operatingRange', e.target.value)}
                    placeholder="e.g., 18-25Â°C, 45-75% RH"
                  />
                </div>

                <div>
                  <Label htmlFor="powerRequirement">Power Requirement</Label>
                  <Input
                    id="powerRequirement"
                    value={formData.specifications.powerRequirement}
                    onChange={(e) => updateFormData('specifications.powerRequirement', e.target.value)}
                    placeholder="e.g., 120V/60Hz"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Submit Buttons */}
          <div className="flex justify-end space-x-4">
            <Link href="/dashboard/equipment">
              <Button variant="outline" type="button">
                Cancel
              </Button>
            </Link>
            <Button type="submit" disabled={loading} className="bg-blue-600 hover:bg-blue-700">
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Creating...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  Create Equipment
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}
```

Create ALL the above files exactly as specified. This creates a complete equipment management system with:

1. **Equipment listing page** with search, filters, and stats
2. **Equipment cards** showing status, compliance, and quick actions
3. **Add new equipment form** with comprehensive validation
4. **Status badges** and compliance indicators
5. **Responsive grid layout** with professional styling
6. **Quick actions** for calibration scheduling
7. **Empty states** and loading indicators

After creating these files, you'll have a fully functional equipment management system.

Next I'll give you the prompt for **Calibration Workflow & AI Validation**.
```